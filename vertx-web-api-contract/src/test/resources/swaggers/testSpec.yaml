openapi: 3.0.0
info:
  version: 1.0.0
  title: Vertx test spec
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      security:
        - api_key: []
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        201:
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /queryTests/arrayTests/formExploded:
    get:
      operationId: arrayTestFormExploded
      parameters:
        - name: parameter
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: integer
              multipleOf: 2
      responses:
        default:
          description: ok
  /queryTests/default:
    get:
      operationId: testDefault
      parameters:
        - name: parameter
          in: query
          required: true
          allowEmptyValue: true
          schema:
            type: string
            default: aString
      responses:
        default:
          description: ok
  /queryTests/arrayTests/default:
    get:
      operationId: arrayTest
      parameters:
        - name: parameter
          in: query
          required: true
          schema:
            type: array
            items:
              type: integer
              multipleOf: 2
      responses:
        default:
          description: ok
  /formTests/arraytest:
    post:
      operationId: formArrayTest
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: string
                values:
                  # complex types are stringified to support RFC 1866
                  type: array
                  items:
                    type: integer
      responses:
        default:
          description: ok
  /jsonBodyTest/sampleTest:
    post:
      operationId: jsonBodyTest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                values:
                  type: array
                  items:
                    type: integer
      responses:
        default:
          description: ok
  /queryTests/allOfTest:
    get:
      operationId: alloftest
      parameters:
        - name: parameter
          in: query
          required: true
          explode: false
          schema:
            allOf:
              - type: object
                properties:
                  a:
                    type: integer
                required:
                  - a
              - type: object
                properties:
                  b:
                    type: boolean
                    default: false
                required:
                  - b
      responses:
        default:
          description: ok
  /queryTests/anyOfTest:
    get:
      operationId: alloftest
      parameters:
        - name: parameter
          in: query
          required: true
          explode: false
          schema:
            anyOf:
              - type: boolean
              - type: integer
      responses:
        default:
          description: ok
  /multipart/complex:
    post:
      operationId: complexMultipartRequest
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                param1:
                  type: string
                param2:
                  $ref: "#/components/schemas/Pet"
                param3:
                  type: string
                param4:
                  type: array
                  items:
                    type: number
                    format: float
            encoding:
              param3:
                contentType: application/sql
      responses:
        default:
          description: ok
  /circularReferences:
    post:
      operationId: circularReferences
      tags:
        - pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaRecursive"
      responses:
        default:
          description: Ok
  /failureTest:
    get:
      operationId: failureTest
      responses:
        default:
          description: Kaboom

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    SchemaRecursive:
      type: object
      properties:
        a:
          $ref: '#/components/schemas/SchemaInnerRecursive'
        b:
          type: string
        c:
          type: number
    SchemaInnerRecursive:
      type: object
      properties:
        a:
          type: array
          items:
            $ref: '#/components/schemas/SchemaRecursive'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header

